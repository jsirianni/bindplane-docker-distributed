version: "2"

services:
  kafka:
    container_name: kafka
    restart: always
    image: docker.io/bitnami/kafka:3.5
    volumes:
      - ./data/kafka:/bitnami
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,LISTENER_LOCAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,LISTENER_LOCAL://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    # Use healthcheck to wait for Kafka to be ready
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 2s
      timeout: 10s
      retries: 5

    container_name: postgres
    restart: always
    image: postgres:14.0
    environment:
      - POSTGRES_USER=bindplane
      - POSTGRES_PASSWORD=bindplane
      - POSTGRES_DB=bindplane
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  prometheus:
    container_name: prometheus
    restart: always
    image: prom/prometheus:v2.47.2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=2d'
      - '--web.enable-remote-write-receiver'
      - '--web.listen-address=0.0.0.0:9090'
      - '--storage.tsdb.path=/var/lib/prometheus/tsdb'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/rules.yml:/etc/prometheus/rules.yml
      - ./data/prometheus:/var/lib/prometheus/tsdb

  nginx:
    container_name: nginx
    restart: always
    image: nginx:latest
    volumes:
      - ./config/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 8080:8080

  transform:
    container_name: transform-agent
    restart: always
    image: ghcr.io/observiq/bindplane-transform-agent:latest

  # When BindPlane is operating in distributed mode, it must
  # be configured with the following:
  # - An external event bus (Kafka or Google Pub/Sub)
  # - An external data store (Postgres)
  # - An external time series database (Prometheus)
  # - An external transform agent (Transform Agent)
  # - A load balancer
  # - The remote url (BINDPLANE_REMOTE_URL) must be set to the
  #   load balancer url or internal docker service name. This allows
  #   agents to connect to BindPlane and forward measurement data.
  #   NOTE: Agents outside of this docker context will not be able to
  #   connect because they cannot resolve the "bindplane" service.
  bindplane:
    container_name: bindplane
    restart: always
    deploy:
      replicas: 5
    image: ghcr.io/observiq/bindplane-ee:1.39.0
    environment:
      - BINDPLANE_REMOTE_URL=http://bindplane:3001
      - BINDPLANE_SESSIONS_SECRET=403dd8ff-72a9-4401-9a66-e54b37d6e0ce
      - BINDPLANE_LOG_OUTPUT=stdout
      - BINDPLANE_ACCEPT_EULA=true
      - BINDPLANE_LICENSE=${BINDPLANE_LICENSE}
      - BINDPLANE_SECRET_KEY=403dd8ff-72a9-4401-9a66-e54b37d6e0ce
      - BINDPLANE_TRANSFORM_AGENT_ENABLE_REMOTE=true
      - BINDPLANE_TRANSFORM_AGENT_REMOTE_AGENTS=transform:4568
      - BINDPLANE_EVENT_BUS_TYPE=kafka
      - BINDPLANE_KAFKA_BROKERS=kafka:9092
      - BINDPLANE_KAFKA_TOPIC=bindplane-op-message-bus
      - BINDPLANE_KAFKA_PROTOCOL_VERSION=3.5.0
      - BINDPLANE_PROMETHEUS_ENABLE_REMOTE=true
      - BINDPLANE_PROMETHEUS_HOST=prometheus
      - BINDPLANE_PROMETHEUS_PORT=9090
      - BINDPLANE_STORE_TYPE=postgres
      - BINDPLANE_POSTGRES_HOST=postgresql
      - BINDPLANE_POSTGRES_PORT=5432
      - BINDPLANE_POSTGRES_USERNAME=bindplane
      - BINDPLANE_POSTGRES_PASSWORD=bindplane
      - BINDPLANE_POSTGRES_DATABASE=bindplane
    depends_on:
      - kafka
      - postgresql

  # The BindPlane Agent is used to collect telemetry from a host.
  # It connects to BindPlane using OpAMP by targeting the docker
  # bindplane service.
  agent:
    deploy:
      replicas: 10
    image: observiq/bindplane-agent:1.42.0
    environment:
      - OPAMP_ENDPOINT=ws://bindplane:3001/v1/opamp
      - OPAMP_SECRET_KEY=403dd8ff-72a9-4401-9a66-e54b37d6e0ce
      - OPAMP_LABELS=configuration=test
    restart: always

